{"version":3,"sources":["components/Timer/QuizTimer.js","components/Timer/QuestionTimer.js","components/Questions/QuestionPicker.js","components/Questions/QuestionCard.js","components/Main/Main.js","App.js","reportWebVitals.js","index.js"],"names":["QuizTimer","seconds","h","Math","floor","m","s","hDisplay","mDisplay","sDisplay","style","color","fontSize","QuestionTimer","QuestionCard","question","handleAnswerOptionClick","className","questionText","answerOptions","map","answerOption","onClick","isCorrect","answerText","N","config","boxesNumber","queues","i","push","questions","length","queueTimes","queueTime","hardestBoxTime","timeDecrement","questionProbability","ans","n","count","random","questionPicker","queueIndex","shift","questionTime","initialQuestionData","totalQuestions","Main","useState","setCurrentQuestionNumber","currentQuestionData","setCurrentQuestionData","score","setScore","showScore","setShowScore","quizTime","quizSeconds","setQuizSeconds","questionSeconds","setQuestionSeconds","useEffect","timer","setTimeout","clearTimeout","questionData","handleQuestionQueue","currentQuestionNumber","textAlign","marginBottom","toFixed","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.69703605.chunk.js","sourcesContent":["/*Screen to display the total quiz timer.\nIt takes seconds as its argument and converts it into mm:ss format\n*/\nimport React from \"react\";\n\nexport default function QuizTimer({ seconds }) {\n  var h = Math.floor(seconds / 3600);\n  var m = Math.floor((seconds % 3600) / 60);\n  var s = Math.floor((seconds % 3600) % 60);\n  var hDisplay = h > 0 ? h + (h === 1 ? \" hour \" : \" hours \") : \"\";\n  var mDisplay = m > 0 ? m + (m === 1 ? \" minute \" : \" minutes \") : \"\";\n  var sDisplay = s > 0 ? s + (s === 1 ? \" second\" : \" seconds\") : \"\";\n  return (\n    <p\n      style={{\n        color: \"white\",\n        fontSize: 17,\n      }}\n    >\n      Total Time left: {hDisplay + mDisplay + sDisplay}\n    </p>\n  );\n}\n","/*Screen to display the individual question timer.\nIt takes seconds as its argument and converts it into mm:ss format\n*/\nimport React from \"react\";\n\nexport default function QuestionTimer({ seconds }) {\n  var h = Math.floor(seconds / 3600);\n  var m = Math.floor((seconds % 3600) / 60);\n  var s = Math.floor((seconds % 3600) % 60);\n  var hDisplay = h > 0 ? h + (h === 1 ? \" hour \" : \" hours \") : \"\";\n  var mDisplay = m > 0 ? m + (m === 1 ? \" minute \" : \" minutes \") : \"\";\n  var sDisplay = s > 0 ? s + (s === 1 ? \" second\" : \" seconds\") : \"\";\n  return (\n    <p\n      style={{\n        color: \"white\",\n        fontSize: 17,\n      }}\n    >\n      Question time left: {hDisplay + mDisplay + sDisplay}\n    </p>\n  );\n}\n","/*\n * Picks a question to send to question display.\n */\nimport questions from \"../../questions.json\";\nimport config from \"../../config.json\";\n\nconst N = config.boxesNumber; //Number of boxes to make\nconst queues = [];\n/**\n * Push queues depending upon N\n * e.g N = 3\n * queues will become[[], [], []]\n */\nfor (let i = 0; i < N; i++) {\n  queues.push([]);\n}\n\n/**\n * Push questions to different queues. For each queue to have a question,\n * number of queues < number of total questions.\n */\n//\nfor (let i = 0; i < questions.length; i++) {\n  queues[i % N].push(questions[i]);\n}\n\n/**\n * Assign timer to each queue. First queue is assigned the most time and the time\n * decreases for each queue afterwards.\n */\nconst queueTimes = []; //Store how much time to allow for questions from each queue\nlet queueTime = config.hardestBoxTime;\nfor (let i = 0; i < queues.length; i++) {\n  queueTimes.push(queueTime);\n  queueTime = queueTime - config.timeDecrement;\n}\n\n/**\n * Update the queue depending upon user response.\n *\n * @param {Object} Object with the following fields:\n *  - question: question Object that user answered.\n *  - queueIndex: the index of the queue the question needs to pushed.\n * @param {Boolean} isCorrect Did the user answer correctly.\n */\nconst handleQuestionQueue = ({ question, queueIndex }, isCorrect) => {\n  if (isCorrect) {\n    //If question is not in last queue and answered correctly, move to next queue.\n    if (queueIndex !== N - 1) {\n      queues[queueIndex + 1].push(question);\n    }\n\n    //If question in last queue and answered correctly, push it at end of last queue.\n    else {\n      queues[N - 1].push(question);\n    }\n  }\n\n  //If the question was answered wrong, push it to end of queue 0.\n  if (!isCorrect) {\n    queues[0].push(question);\n  }\n};\n\n/**\n * Pick and return the correct question based on the core algorithm\n *\n * @returns {Object} Object with the following fields:\n *  - question: the question picked\n *  - questionTime: time for the individual question\n *  - queueIndex: the index of the queue the question was picked from\n */\nconst questionPicker = () => {\n  const queueIndex = questionProbability();\n\n  if (queues[queueIndex].length > 0) {\n    const question = queues[queueIndex].shift();\n    return {\n      question,\n      questionTime: queueTimes[queueIndex],\n      queueIndex,\n    };\n  } else {\n    return questionPicker();\n  }\n};\n\n/**\n * queue with harder questions have a higher probability of being picked.\n * @returns {Integer} the queueIndex to send to question picker.\n */\nconst questionProbability = () => {\n  let ans = [];\n  let n = queues.length;\n  let count = 0;\n\n  //Add zero to array n times, one to array n-1 times and so on until N-1\n  /*\n    e.g. n = 3\n    them 0 will be added 3 times, 1 will bed added twice and 3 will be added once\n    Resulting array: [0,0,0,1,1,2]\n    Since 0 has a higher frequency, the random method will have a higher probability of picking 0.\n    */\n  while (n > 0) {\n    for (let i = 0; i < n; i++) {\n      ans.push(count);\n    }\n    n--;\n    count++;\n  }\n  let index = ans[Math.floor(Math.random() * ans.length)]; //Picks a random number from the array\n  return index;\n};\n\nexport { handleQuestionQueue };\nexport default questionPicker;\n","import React from \"react\";\nimport \"./QuestionCard.css\";\n/**\n * Makes a question display given a question\n *\n * @param {Object} object with the following fields:\n *  - question: question to display\n *  - handleAnswerOptionClick: decides what to do depending upon what answer the user clicked.\n */\nconst QuestionCard = ({ question, handleAnswerOptionClick }) => {\n  return (\n    <>\n      <div className=\"question-text\">{question.questionText}</div>\n      <div className=\"answer-section\">\n        {question.answerOptions.map((answerOption) => (\n          <button\n            onClick={() => handleAnswerOptionClick(answerOption.isCorrect)}\n          >\n            {answerOption.answerText}\n          </button>\n        ))}\n      </div>\n    </>\n  );\n};\nexport default QuestionCard;\n","import React, { useState, useEffect } from \"react\";\nimport \"./main.css\";\nimport QuizTimer from \"../Timer/QuizTimer\";\nimport QuestionTimer from \"../Timer/QuestionTimer\";\nimport QuestionCard from \"../Questions/QuestionCard\";\nimport questionPicker, {\n  handleQuestionQueue,\n} from \"../Questions/QuestionPicker\";\nimport config from \"../../config.json\";\n\n/**\n * question data contains a question, queue index and question time from which the question\n * was picked\n */\nconst initialQuestionData = questionPicker(0);\nlet totalQuestions = 0; //Total number of questions answered during the session\nexport default function Main() {\n  const [currentQuestionNumber, setCurrentQuestionNumber] = useState(0);\n  const [currentQuestionData, setCurrentQuestionData] = useState(\n    initialQuestionData\n  );\n  const [score, setScore] = useState(0);\n  const [showScore, setShowScore] = useState(false);\n  const [quizSeconds, setQuizSeconds] = useState(config.quizTime);\n  const [questionSeconds, setQuestionSeconds] = useState(\n    initialQuestionData.questionTime\n  );\n\n  //For total quiz timer\n  useEffect(() => {\n    if (!showScore) {\n      if (quizSeconds > 0) {\n        const timer = setTimeout(() => setQuizSeconds(quizSeconds - 1), 1000);\n        return () => clearTimeout(timer);\n      } else {\n        setShowScore(true);\n      }\n    }\n  }, [showScore, quizSeconds]);\n\n  //For individual question timer\n  useEffect(() => {\n    if (!showScore) {\n      if (questionSeconds > 0) {\n        const timer = setTimeout(\n          () => setQuestionSeconds(questionSeconds - 1),\n          1000\n        );\n        return () => clearTimeout(timer);\n      } else {\n        handleAnswerOptionClick(currentQuestionData, false);\n      }\n    }\n  }, [questionSeconds, currentQuestionData]);\n\n  /**\n   * If question answered correctly, increase score by 1 and call handleQuestionQueue\n   * to put the question data in the right queue.\n   *\n   * If question answered incorrectly, handleQuestionQueue puts the question data in queue[0]\n   *\n   * Set question data for the next question to be shown\n   */\n  const handleAnswerOptionClick = (questionData, isCorrect) => {\n    handleQuestionQueue(questionData, isCorrect);\n    totalQuestions++; //Increase total number of questions attempted by the user.\n\n    //Increase score by 1 if answered correctly\n    if (isCorrect) {\n      setScore(score + 1);\n    }\n\n    //Set question data for next question to be presented to user\n    setCurrentQuestionNumber(\n      (currentQuestionNumber) => currentQuestionNumber + 1\n    );\n    questionData = questionPicker();\n    let questionSeconds = questionData.questionTime;\n    setCurrentQuestionData(questionData);\n    setQuestionSeconds(questionSeconds);\n  };\n\n  return (\n    <div\n      style={{\n        textAlign: \"center\",\n      }}\n    >\n      <text\n        style={{\n          color: \"#F0178A\",\n          fontSize: 50,\n          marginBottom: 10,\n        }}\n      >\n        Quiz\n      </text>\n      {showScore ? (\n        <div className=\"app\">\n          <div className=\"score-section\">\n            {totalQuestions !== 0 && (\n              <>\n                <p>\n                  You answered {score} out of {totalQuestions} questions\n                  correctly.\n                </p>\n                <p>You scored {((score / totalQuestions) * 100).toFixed(2)}%</p>\n              </>\n            )}\n            {totalQuestions === 0 && (\n              <>\n                <p>\n                  You answered {score} out of {totalQuestions} questions\n                  correctly.\n                </p>\n                <p>You scored 0 %</p>\n              </>\n            )}\n          </div>\n        </div>\n      ) : (\n        <>\n          <QuizTimer seconds={quizSeconds} />\n          <div className=\"app\">\n            <div className=\"question-section\">\n              <QuestionTimer seconds={questionSeconds} />\n              <QuestionCard\n                question={currentQuestionData.question}\n                handleAnswerOptionClick={(isCorrect) =>\n                  handleAnswerOptionClick(currentQuestionData, isCorrect)\n                }\n              />\n            </div>\n          </div>\n        </>\n      )}\n    </div>\n  );\n}\n","import Main from \"./components/Main/Main\";\nfunction App() {\n  return <Main />;\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}